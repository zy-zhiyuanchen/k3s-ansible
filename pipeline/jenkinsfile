pipeline {
    agent any

    parameters {
        choice(
            name: 'PLAYBOOK_ACTION',
            choices: [
                'install',
                'k3s-upgrade',
                'reboot', 
                'reset',
                'install-only-k3s',
                'k3s-upgrade',
                'install-all'
            ],
            description: 'Select the action to perform'
        )

        string(
            name: 'GITHUB_REPO',
            defaultValue: 'https://github.com/zy-zhiyuanchen/k3s-ansible.git',
            description: 'K3s Ansible GitHub Repository URL'
        )

        string(
            name: 'GITHUB_BRANCH',
            defaultValue: 'main',
            description: 'Git branch to checkout'
        )

        // Optional overrides (only used if set)
        string(name: 'K3S_VERSION', defaultValue: '', description: 'Override k3s version (optional)')
        string(name: 'CILIUM_VERSION', defaultValue: '', description: 'Override Cilium version (optional)')
        string(name: 'CILIUM_CLI_VERSION', defaultValue: '', description: 'Override Cilium CLI version (optional)')
        string(name: 'HELM_VERSION', defaultValue: '', description: 'Override Helm version (optional)')
        string(name: 'METALLB_VERSION', defaultValue: '', description: 'Override MetalLB version (optional)')
        string(name: 'METALLB_CHART_VERSION', defaultValue: '', description: 'Override MetalLB Helm chart version (optional)')

        booleanParam(name: 'INSTALL_CILIUM', defaultValue: true, description: 'Install Cilium CNI')
        booleanParam(name: 'INSTALL_METALLB', defaultValue: true, description: 'Install MetalLB')

        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Run in check mode (dry run)')
        booleanParam(name: 'VERBOSE', defaultValue: false, description: 'Enable verbose output')

        string(
            name: 'EXTRA_VARS',
            defaultValue: '',
            description: 'Additional Ansible variables (key=value format, space separated)'
        )
    }


    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "üöÄ Starting K3s Ansible Pipeline"
                    echo "Action: ${params.PLAYBOOK_ACTION}"
                    echo "Repository: ${params.GITHUB_REPO}"
                    echo "Branch: ${params.GITHUB_BRANCH}"
                    cleanWs()
                }
            }
        }

        stage('Install Prerequisites') {
            steps {
                script {
                    echo "üì¶ Installing prerequisites..."
                    if (isUnix()) {
                        sh '''
                            if command -v apt-get >/dev/null 2>&1; then
                                sudo apt-get update
                                sudo apt-get install -y python3 python3-pip python3-venv git
                            elif command -v yum >/dev/null 2>&1; then
                                sudo yum install -y python3 python3-pip git epel-release
                                sudo yum install -y python3-virtualenv || sudo pip3 install virtualenv
                            elif command -v dnf >/dev/null 2>&1; then
                                sudo dnf install -y python3 python3-pip python3-virtualenv git
                            else
                                echo "Unsupported package manager. Install python3, pip3, and git manually."
                                exit 1
                            fi
                        '''
                        sh '''
                            python3 -m venv ansible-venv
                            source ansible-venv/bin/activate
                            pip install --upgrade pip
                            pip install ansible>=8.0.0 ansible-core>=2.15.0
                        '''
                    } else {
                        error "Windows agents are not supported for this pipeline"
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    echo "üì• Checking out repository..."
                    git branch: params.GITHUB_BRANCH, url: params.GITHUB_REPO
                }
            }
        }

        stage('Install Ansible Collections') {
            steps {
                script {
                    echo "üìö Installing Ansible collections..."
                    sh '''
                        source ansible-venv/bin/activate
                        if [ -f "collections/requirements.yml" ]; then
                            ansible-galaxy collection install -r collections/requirements.yml
                        fi
                        ansible-galaxy collection install community.general ansible.posix kubernetes.core
                        ansible-galaxy collection list
                    '''
                }
            }
        }

        stage('Prepare Extra Vars') {
            steps {
                script {
                    echo "‚öôÔ∏è Preparing Ansible variables..."
                    def extraVars = []

                    // Add overrides only if provided
                    if (params.K3S_VERSION?.trim()) extraVars.add("k3s_version=${params.K3S_VERSION}")
                    if (params.CILIUM_VERSION?.trim()) extraVars.add("cilium_version=${params.CILIUM_VERSION}")
                    if (params.CILIUM_CLI_VERSION?.trim()) extraVars.add("cilium_cli_version=${params.CILIUM_CLI_VERSION}")
                    if (params.HELM_VERSION?.trim()) extraVars.add("helm_version=${params.HELM_VERSION}")
                    if (params.METALLB_VERSION?.trim()) extraVars.add("metallb_version=${params.METALLB_VERSION}")
                    if (params.METALLB_CHART_VERSION?.trim()) extraVars.add("metallb_chart_version=${params.METALLB_CHART_VERSION}")

                    // Always include these toggles
                    extraVars.add("install_cilium=${params.INSTALL_CILIUM}")
                    extraVars.add("install_metallb=${params.INSTALL_METALLB}")

                    if (params.EXTRA_VARS?.trim()) {
                        extraVars.addAll(params.EXTRA_VARS.split(' '))
                    }

                    env.ANSIBLE_EXTRA_VARS = extraVars.join(' ')
                    echo "Final extra vars: ${env.ANSIBLE_EXTRA_VARS}"
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    echo "üé≠ Running Ansible playbook..."
                    def cmd = "source ansible-venv/bin/activate && ansible-playbook"
                    def flags = ["-i inventory.yml"]

                    if (params.DRY_RUN) { flags.add("--check --diff") }
                    if (params.VERBOSE) { flags.add("-vvv") }
                    if (env.ANSIBLE_EXTRA_VARS?.trim()) { flags.add("-e '${env.ANSIBLE_EXTRA_VARS}'") }

                    def playbookFile = ""
                    switch(params.PLAYBOOK_ACTION) {
                        case 'install':
                        case 'install-all':
                            playbookFile = "playbooks/site.yml"; break
                        case 'install-only-k3s':
                            playbookFile = "playbooks/site.yml"
                            flags.add("-e 'install_cilium=false install_metallb=false'"); break
                        case 'k3s-upgrade': playbookFile = "playbooks/upgrade.yml"; break
                        case 'reboot': playbookFile = "playbooks/reboot.yml"; break
                        case 'reset': playbookFile = "playbooks/reset.yml"; break
                        default: error "Unknown action ${params.PLAYBOOK_ACTION}"
                    }

                    def fullCmd = "${cmd} ${playbookFile} ${flags.join(' ')}"
                    echo "Executing: ${fullCmd}"

                    def result = sh(script: fullCmd, returnStatus: true)
                    if (result != 0) error "Playbook failed with code ${result}"
                    echo "‚úÖ Playbook completed successfully"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning workspace..."
            archiveArtifacts artifacts:
