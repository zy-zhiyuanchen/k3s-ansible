---
- name: Wait for K3s to be ready
  ansible.builtin.wait_for:
    port: 6443
    host: "{{ ansible_default_ipv4.address }}"
    delay: 10
    timeout: 300

- name: Wait for Kubernetes API to be responsive
  ansible.builtin.command:
    cmd: kubectl get nodes
  register: kubectl_result
  until: kubectl_result.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Check if Cilium CLI is already installed
  ansible.builtin.stat:
    path: /usr/local/bin/cilium
  register: cilium_cli_installed

- name: Get current Cilium CLI version
  when: cilium_cli_installed.stat.exists
  ansible.builtin.command:
    cmd: /usr/local/bin/cilium version --client
  register: current_cilium_cli_version
  failed_when: false
  changed_when: false

- name: Extract current Cilium CLI version
  when: cilium_cli_installed.stat.exists and current_cilium_cli_version.rc == 0
  ansible.builtin.set_fact:
    installed_cilium_cli_version: "{{ current_cilium_cli_version.stdout | regex_search('cilium-cli: v([0-9.]+)', '\\1') | first }}"

- name: Download and install/upgrade Cilium CLI
  when: >
    not cilium_cli_installed.stat.exists or
    (installed_cilium_cli_version is defined and installed_cilium_cli_version is version(cilium_cli_version, '<'))
  block:
    - name: Create temporary directory for Cilium CLI download
      ansible.builtin.tempfile:
        state: directory
        suffix: cilium
      register: cilium_temp_dir

    - name: Download Cilium CLI
      ansible.builtin.get_url:
        url: "https://github.com/cilium/cilium-cli/releases/download/v{{ cilium_cli_version }}/cilium-linux-{{ cilium_cli_arch }}.tar.gz"
        dest: "{{ cilium_temp_dir.path }}/cilium-cli.tar.gz"
        mode: "0644"

    - name: Extract Cilium CLI
      ansible.builtin.unarchive:
        src: "{{ cilium_temp_dir.path }}/cilium-cli.tar.gz"
        dest: "{{ cilium_temp_dir.path }}"
        remote_src: true

    - name: Install/Upgrade Cilium CLI
      ansible.builtin.copy:
        src: "{{ cilium_temp_dir.path }}/cilium"
        dest: /usr/local/bin/cilium
        mode: "0755"
        remote_src: true

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ cilium_temp_dir.path }}"
        state: absent

- name: Check if Cilium is already installed
  ansible.builtin.command:
    cmd: kubectl get daemonset cilium -n kube-system
  register: cilium_check
  failed_when: false
  changed_when: false
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Get current Cilium version
  when: cilium_check.rc == 0
  ansible.builtin.command:
    cmd: kubectl get daemonset cilium -n kube-system -o jsonpath='{.spec.template.spec.containers[0].image}'
  register: current_cilium_image
  changed_when: false
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Extract current Cilium version
  when: cilium_check.rc == 0 and current_cilium_image.stdout is defined
  ansible.builtin.set_fact:
    installed_cilium_version: "{{ current_cilium_image.stdout.split(':')[1] | regex_replace('^v', '') }}"

- name: Determine if Cilium needs installation or upgrade
  ansible.builtin.set_fact:
    cilium_needs_action: >-
      {{
        cilium_check.rc != 0 or
        cilium_force_upgrade |bool or
        (installed_cilium_version is defined and installed_cilium_version is version(cilium_version, '<'))
      }}

- name: Install or upgrade Cilium CNI
  when: cilium_needs_action |bool
  block:
    - name: Display action being performed
      ansible.builtin.debug:
        msg: >-
          {% if cilium_check.rc != 0 %}
          Installing Cilium {{ cilium_version }} for the first time
          {% else %}
          Upgrading Cilium from {{ installed_cilium_version | default('unknown') }} to {{ cilium_version }}
          {% endif %}

    - name: Install/Upgrade Cilium using Cilium CLI
      ansible.builtin.command:
        cmd: >
          cilium install 
          --version {{ cilium_version }}
          --set k8sServiceHost={{ api_endpoint }}
          --set k8sServicePort=6443
          --set cluster.name=k3s-cluster
          --set ipam.mode=kubernetes
          {% if cilium_check.rc == 0 %}--upgrade{% endif %}
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      register: cilium_install_result
      changed_when: cilium_install_result.rc == 0

    - name: Wait for Cilium to be ready
      ansible.builtin.command:
        cmd: cilium status --wait --wait-duration={{ cilium_install_timeout }}s
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      register: cilium_status_result
      changed_when: false
      retries: 3
      delay: 10

- name: Verify Cilium installation
  ansible.builtin.command:
    cmd: cilium status
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: cilium_final_status
  changed_when: false

- name: Display Cilium status
  ansible.builtin.debug:
    var: cilium_final_status.stdout_lines

- name: Save Cilium version info
  ansible.builtin.debug:
    msg: "Cilium CLI {{ cilium_cli_version }} and Cilium CNI {{ cilium_version }} are installed"