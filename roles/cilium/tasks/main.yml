---
- name: Prepare Cilium CLI on first master and deploy CNI
  when: inventory_hostname == groups[server_group][0] or ansible_host == groups[server_group][0]
  run_once: true
  block:
    - name: Create tmp directory on first master
      ansible.builtin.file:
        path: /tmp/k3s
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Check if Cilium CLI is installed
      ansible.builtin.command: cilium version
      register: cilium_cli_installed
      changed_when: false
      ignore_errors: true
    
    - name: Check for Cilium CLI version in command output
      ansible.builtin.set_fact:
        installed_cli_version: >-
          {{
            cilium_cli_installed.stdout
            | regex_findall('cilium-cli: (v\d+\.\d+\.\d+)')
            | first
            | default('unknown')
          }}
      when: cilium_cli_installed.rc == 0
    - name: Get latest stable Cilium CLI version
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
        return_content: yes
      register: cli_ver_response
      environment: "{{ proxy_env | default({}) }}"

    - name: Set latest CLI version fact
      ansible.builtin.set_fact:
        latest_cli_version: "{{ cli_ver_response.content | trim }}"
        
    - name: Log installed and latest Cilium CLI versions
      ansible.builtin.debug:
        msg: |
          Installed: {{ installed_cli_version | default('Not installed') }}
          Latest: {{ latest_cli_version }}

    - name: Determine if Cilium CLI needs installation or update
      ansible.builtin.set_fact:
        cilium_cli_needs_update: >-
          {{
            (cilium_cli_installed.rc != 0) or
            (cilium_cli_installed.rc == 0 and installed_cli_version != latest_cli_version)
          }}

    - name: Install or update Cilium CLI
      when: cilium_cli_needs_update
      block:
        - name: Set architecture variable
          ansible.builtin.set_fact:
            cli_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

        - name: Download Cilium CLI and checksum
          ansible.builtin.get_url:
            url: "{{ cilium_base_url }}/cilium-linux-{{ cli_arch }}{{ item }}"
            dest: /tmp/k3s/cilium-linux-{{ cli_arch }}{{ item }}
            owner: root
            group: root
            mode: "0755"
          loop:
            - .tar.gz
            - .tar.gz.sha256sum
          vars:
            cilium_base_url: https://github.com/cilium/cilium-cli/releases/download/{{ latest_cli_version }}

        - name: Verify the downloaded tarball
          ansible.builtin.command: sha256sum --check cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
          args:
            chdir: /tmp/k3s
          changed_when: false

        - name: Extract Cilium CLI to /usr/local/bin
          ansible.builtin.unarchive:
            src: /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz
            dest: /usr/local/bin
            remote_src: true

        - name: Remove downloaded tarball and checksum file
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz
            - /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz.sha256sum

    - name: Wait for Kubernetes API endpoint
      ansible.builtin.wait_for:
        host: "{{ api_endpoint }}"
        port: 6443
        delay: 1
      register: api_test_result
      ignore_errors: true
      changed_when: false

    - name: Fail if kubernetes API endpoint not reachable
      ansible.builtin.fail:
        msg: API endpoint {{ api_endpoint }} is not reachable
      when: api_test_result is failed

    - name: Add Cilium Helm repo
      kubernetes.core.helm_repository:
        name: "{{ cilium_repo_name }}"
        repo_url: "https://helm.cilium.io"
        state: present

    - name: Get latest stable Cilium version
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/cilium/cilium/main/stable.txt
        return_content: yes
      register: cilium_ver_response
      environment: "{{ proxy_env | default({}) }}"

    - name: Set latest Cilium version fact
      ansible.builtin.set_fact:
        cilium_latest_version: "{{ cilium_ver_response.content | trim }}"

    - name: Get installed Cilium release info
      kubernetes.core.helm_info:
        name: "{{ cilium_release_name }}"
        release_namespace: "{{ cilium_namespace | default('kube-system')}}"
      register: cilium_info
      failed_when: false
      changed_when: false

    - name: Set installed Cilium version fact
      ansible.builtin.set_fact:
        installed_cilium_version: "{{ cilium_info.status.chart.split('-')[-1] }}"
      when: cilium_info.status is defined

    - name: Log Cilium installation status
      ansible.builtin.debug:
        msg: >
          Installed Cilium version: {{ installed_cilium_version | default('Not installed') }},
          Target Cilium version: {{ cilium_version | default(cilium_latest_version) }}

    - name: Determine if Cilium needs installation or upgrade
      ansible.builtin.set_fact:
        cilium_needs_install: >-
          {{
            (cilium_info.status.chart is not defined) or 
            (installed_cilium_version != (cilium_version | default(cilium_latest_version)))
          }}

    - name: Install or upgrade Cilium using Helm
      kubernetes.core.helm:
        name: "{{ cilium_release_name }}"
        chart_ref: "{{ cilium_repo_name }}/{{ cilium_chart_name }}"
        release_namespace: "{{ cilium_namespace | default('kube-system')}}"
        chart_version: "{{ cilium_version | default(cilium_latest_version) }}"
        create_namespace: true
        values: "{{ cilium_helm_values }}"
        state: present
        atomic: true
        wait: true
        timeout: "300s"
        force: false
        update_repo_cache: true
      register: cilium_helm_result
      when: cilium_needs_install

    - name: Wait for Cilium pods to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ cilium_namespace | default('kube-system') }}"
        label_selectors:
          - k8s-app=cilium
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300

    - name: Wait for Cilium operator to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: cilium-operator
        namespace: "{{ cilium_namespace | default('kube-system') }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300

    - name: Wait for Hubble components (if enabled)
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item }}"
        namespace: "{{ cilium_namespace | default('kube-system') }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      loop:
        - hubble-relay
        - hubble-ui
      when: cilium_hubble | default(false)

    - name: Set context for Cilium CLI
      ansible.builtin.command: cilium context --helm-release-name {{ cilium_release_name }} --helm-namespace {{ cilium_namespace | default('kube-system') }}
      failed_when: false
      changed_when: false

    - name: Apply BGP configurations
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'cilium_bgp.j2') | from_yaml_all }}"
      when: cilium_bgp | default(false)



