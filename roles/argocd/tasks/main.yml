- name: Install and configure ArgoCD on first master
  when: inventory_hostname == groups[server_group][0] or ansible_host == groups[server_group][0]
  run_once: true
  block:
    - name: Create tmp directory on first master
      ansible.builtin.file:
        path: /tmp/k3s
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Check if Helm is installed
      ansible.builtin.command: helm version --short
      register: helm_installed
      failed_when: false
      changed_when: false
      ignore_errors: true

    - name: Install Helm if not present
      when: helm_installed.rc != 0
      block:
        - name: Download Helm installation script
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            dest: /tmp/k3s/get_helm.sh
            owner: root
            group: root
            mode: "0755"

        - name: Install Helm
          ansible.builtin.command: /tmp/k3s/get_helm.sh
          environment:
            HELM_INSTALL_DIR: /usr/local/bin
          changed_when: true

        - name: Remove Helm installation script
          ansible.builtin.file:
            path: /tmp/k3s/get_helm.sh
            state: absent

    - name: Wait for Kubernetes API endpoint
      ansible.builtin.wait_for:
        host: "{{ api_endpoint }}"
        port: 6443
        delay: 1
      register: api_test_result
      ignore_errors: true
      changed_when: false

    - name: Add ArgoCD Helm repository
      kubernetes.core.helm_repository:
        name: "{{ argocd_repo_name }}"
        repo_url: "https://argoproj.github.io/argo-helm"
        state: present

    - name: Get latest stable ArgoCD chart
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/argoproj/argo-helm/main/charts/argo-cd/Chart.yaml
        return_content: yes
      register: argocd_chart_response
      environment: "{{ proxy_env | default({}) }}"

    - name: Set latest ArgoCD chart version fact
      ansible.builtin.set_fact:
        argo_latest_version: "{{ (argocd_chart_response.content | from_yaml).version }}"


    - name: Check if ArgoCD is already installed
      ansible.builtin.command: >-
        helm list -n {{ argocd_namespace }} --filter {{ argocd_repo_name }}
      register: argocd_installed
      failed_when: false
      changed_when: false
      ignore_errors: false

    - name: Get installed ArgoCD version
      ansible.builtin.set_fact:
        installed_argocd_version: >-
          {{
            argocd_installed.stdout_lines[1].split()[8].split('-')[-1]
            if argocd_installed.rc == 0 and argocd_installed.stdout_lines | length > 1
            else 'none'
          }}
      when: argocd_installed.rc == 0 and argocd_installed.stdout_lines | length > 1

    - name: Log ArgoCD installation status
      ansible.builtin.debug:
        msg: >
          Installed ArgoCD version: {{ installed_argocd_version | default('Not installed') }},
          Target ArgoCD version: {{ argocd_version | default(argocd_latest_version) }}

    - name: Determine if ArgoCD needs installation or upgrade
      ansible.builtin.set_fact:
        argocd_needs_install: >-
          {{
            argocd_installed.rc != 0 or
            argocd_installed.stdout_lines | length <= 1 or
            installed_argocd_version != argocd_version | default(argocd_latest_version)
          }}

    - name: Generate ArgoCD admin password if not provided
      ansible.builtin.set_fact:
        generated_admin_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"
      when: argocd_admin_password is not defined or argocd_admin_password == ""

    - name: Set admin password variable
      ansible.builtin.set_fact:
        admin_password: "{{ argocd_admin_password if (argocd_admin_password is defined and argocd_admin_password != '') else generated_admin_password }}"


    - name: Create ArgoCD values file
      ansible.builtin.template:
        src: templates/argocd_values.j2
        dest: /tmp/k3s/argocd-values.yaml
        owner: root
        group: root
        mode: "0644"
      register: argocd_values_file

    - name: Install or upgrade ArgoCD using Helm
      kubernetes.core.helm:
        name: "{{argocd_release_name}}"
        chart_ref: "{{ argocd_repo_name }}/{{ argocd_chart_name }}"
        release_namespace: "{{ argocd_namespace }}"
        create_namespace: true
        chart_version: "{{ argocd_version }}"
        values_files: 
          - "{{argocd_values_file.dest}}"
        state: present
        atomic: true
        wait: true
        timeout: "300s"
        force: false  # Ensures upgrade runs even if no changes detected
        reset_values: false  # Keep existing values and merge with new ones
      register: argocd_install_result
      when: argocd_needs_install

    - name: Log ArgoCD installation/upgrade result
      ansible.builtin.debug:
        msg: |
          ArgoCD {{ 'installation' if (installed_argocd_version | default('none')) == 'none' else 'upgrade' }} completed successfully.
          Status: {{ argocd_install_result.status | default('Unknown') }}
          Revision: {{ argocd_install_result.revision | default('Unknown') }}
      # when: argocd_install_result is defined and argocd_install_result.status is defined and argocd_install_result.status != "unchanged"
      when: argocd_install_result is defined and argocd_install_result.changed

    - name: Wait for argocd-application pods to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ argocd_namespace }}"
        label_selectors:
          - app.kubernetes.io/name=argocd-application-controller
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 30

    - name: Wait for Cilium operator to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item }}"
        namespace: "{{ argocd_namespace }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 30
      loop:
        - argocd-server
        - argocd-repo-server
        - argocd-applicationset-controller
      when: cilium_hubble | default(false)

    - name: Display ArgoCD access information
      ansible.builtin.debug:
        msg: |
          ArgoCD has been successfully {{ 'installed' if (installed_argocd_version | default('none')) == 'none' else 'upgraded' }}.
          Version: {{ argocd_version }}
          Namespace: {{ argocd_namespace }}
          Service Type: {{ argocd_service_type | default('ClusterIP') }}
          {% if generated_admin_password is defined %}
          Generated Admin Password: {{ generated_admin_password }}
          {% endif %}
      # when: argocd_install_result is defined and argocd_install_result.status is defined and argocd_install_result.status != "unchanged"
      when: argocd_install_result is defined and argocd_install_result.changed

    - name: Clean up temporary files
      ansible.builtin.file:
        path: /tmp/k3s
        state: absent
      when: false  # Keep temp directory for credentials file