---
- name: Check if Helm is installed
  ansible.builtin.stat:
    path: "{{ helm_install_path }}"
  register: helm_installed

- name: Get current Helm version
  when: helm_installed.stat.exists
  ansible.builtin.command:
    cmd: "{{ helm_install_path }} version --short"
  register: current_helm_version
  failed_when: false
  changed_when: false

- name: Extract current Helm version
  when: helm_installed.stat.exists and current_helm_version.rc == 0
  ansible.builtin.set_fact:
    installed_helm_version: "{{ current_helm_version.stdout | regex_search('v([0-9.]+)', '\\1') | first }}"

- name: Determine if Helm needs installation or upgrade
  ansible.builtin.set_fact:
    helm_needs_action: >-
      {{
        not helm_installed.stat.exists or
        helm_force_upgrade |bool or
        (installed_helm_version is defined and installed_helm_version is version(helm_version, '<'))
      }}

- name: Install or upgrade Helm
  when: helm_needs_action |bool
  block:
    - name: Display action being performed
      ansible.builtin.debug:
        msg: >-
          {% if not helm_installed.stat.exists %}
          Installing Helm {{ helm_version }} for the first time
          {% else %}
          Upgrading Helm from {{ installed_helm_version | default('unknown') }} to {{ helm_version }}
          {% endif %}

    - name: Create temporary directory for Helm download
      ansible.builtin.tempfile:
        state: directory
        suffix: helm
      register: helm_temp_dir

    - name: Download Helm
      ansible.builtin.get_url:
        url: "https://get.helm.sh/helm-v{{ helm_version }}-linux-{{ helm_arch }}.tar.gz"
        dest: "{{ helm_temp_dir.path }}/helm.tar.gz"
        mode: "0644"

    - name: Extract Helm
      ansible.builtin.unarchive:
        src: "{{ helm_temp_dir.path }}/helm.tar.gz"
        dest: "{{ helm_temp_dir.path }}"
        remote_src: true

    - name: Install/Upgrade Helm
      ansible.builtin.copy:
        src: "{{ helm_temp_dir.path }}/linux-{{ helm_arch }}/helm"
        dest: "{{ helm_install_path }}"
        mode: "0755"
        remote_src: true

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ helm_temp_dir.path }}"
        state: absent

- name: Verify Helm installation
  ansible.builtin.command:
    cmd: "{{ helm_install_path }} version --short"
  register: helm_version_check
  changed_when: false

- name: Display Helm version
  ansible.builtin.debug:
    msg: "Helm {{ helm_version }} is installed at {{ helm_install_path }}"